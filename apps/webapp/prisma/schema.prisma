datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BaseModel {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum RoleType {
  SUPERUSER
  ADMINISTRATOR
  FACULTY
  SUPPORT
  STUDENT
  REFEREE
  PARTNER
  ALUMNI
  PROSPECTIVE
  GUEST
}

enum AllowedModel {
  COURSE
  ACTIVITY
  COURSE_CONTENT
  FILE
  FORUM
  FORUM_POST
  FORUM_COMMENT
  GRADE
  QUIZ
  QUESTION
  SUBMISSION
  ANSWER_CHOICE
  MATCHING_PAIR
  NOTIFICATION
  TARGET
  USER
  QUALIFICATION
  REFEREE
  TOKEN
  CLAIMS
  MEDIA_FILE
  MEDIA
  PLAYER_INFO
  TAG
  EXERCISE
  GLOBAL_SETTING
  USER_SETTING
  FORUM_TAG
  REMINDER
  PAYMENT
  INVOICE
  TRANSACTION
  ALL
}

enum AllowedPermission {
  CREATE
  READ
  UPDATE
  DELETE
  ALL
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  WORD_DOC
  TEXT
  PPT
  SPREADSHEET
  ARCHIVE
  OTHERS
}

enum SettingType {
  COURSE
  ACCOUNT
  GENERAL
  MULTIMEDIA
}

enum SettingKeys {
  EMAIL_NOTIFICATIONS_ENABLED
  DEFAULT_TIMEZONE
  DEFAULT_LANGUAGE
  DARK_MODE_ENABLED
  SHOW_UNFINISHED_COURSES
  SHOW_COMPLETED_COURSES
  AUTO_ENROLLMENT_ENABLED
  SHOW_COURSE_PROGRESS
  DEFAULT_FONT_SIZE
  ENABLE_TTS
  SHOW_ENROLLED_COURSES_COUNT
  SHOW_INSTRUCTOR_AVAILABILITY
  SHOW_RELATED_COURSES
  SHOW_COURSE_RATINGS
  SHOW_COURSE_REVIEWS
  ALLOW_PUSH_NOTIFICATIONS
  ENABLE_OFFLINE_MODE
  SHOW_COURSE_ACTIVITY_FEED
  ENROLLMENT_OPEN
  MAX_ENROLLMENT
  SHOW_INSTRUCTOR_INFO
  ALLOW_STUDENT_MESSAGES
  COURSE_PASSING_GRADE
  SHOW_POPULAR_COURSES
  SHOW_RECOMMENDED_COURSES
  DEFAULT_COURSE_TEMPLATE
  SHOW_ALL_COURSES
  ALLOW_COURSE_DISCOVERY
  ENABLE_BADGES
  SHOW_COURSE_TAGS
  ALLOW_COURSE_COMMENTS
  ENABLE_SSO_LOGIN
  SHOW_ANNOUNCEMENTS
  SHOW_COURSE_SCHEDULE
}

enum ActivityType {
  COURSE_VIEW
  COURSE_ENROLLED
  COURSE_COMPLETED
  COURSE_PROGRESS
  FORUM_POST_CREATED
  FORUM_POST_UPDATED
  FORUM_COMMENT_CREATED
  FORUM_COMMENT_UPDATED
  GRADE_RECEIVED
  QUIZ_TAKEN
  QUIZ_GRADE_RECEIVED
  ASSIGNMENT_SUBMITTED
  ASSIGNMENT_GRADE_RECEIVED
  RESOURCE_ACCESSED
  MEDIA_INTERACTION
  PAGE_VIEW
}

enum QuestionType {
  MULTIPLE_CORRECT
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  MATCHING
  NUMERIC
}

enum QuizType {
  EXAM
  ASSIGNMENT
}

enum ProctoringMethod {
  NONE
  MANUAL
  AUTOMATED
}

enum TargetType {
  TARGET
  MINIMUM
  MAXIMUM
}

enum RepeatInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum EnrollmentStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ACCEPTED
}

enum NotificationType {
  SYSTEM
  USER_GENERATED
}

enum Gender {
  MALE
  FEMALE
}

enum AuthMethodType {
  EMAIL
  GOOGLE
  API_KEYS
  // Add more authentication methods if needed
}

enum SemesterType {
  FIRST
  SECOND
}

enum CourseType {
  SHORT_COURSE
  PRACTICUM
  THEORY
  REGULAR
  OTHERS
}

enum CourseStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
  DELAYED
}

model Role {
  id            String         @id @default(cuid())
  name          String
  roleType      RoleType?      @unique
  permissions   Permission[]
  allowedModels AllowedModel[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  users         User[]

  @@map("roles")
}

model Permission {
  id          String              @id @default(cuid())
  modelType   AllowedModel?
  permissions AllowedPermission[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?
  roles       Role                @relation(fields: [roleId], references: [id])
  roleId      String

  @@map("permissions")
}

model Session {
  id         String         @id @default(cuid())
  userId     String         @unique
  credential String // Stores identifier or authentication key
  method     AuthMethodType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("auth_methods")
}

model User {
  id          String   @id @default(cuid())
  studentId   String?
  externalId  Int?     @unique @default(autoincrement())
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  fullName    String?  @db.VarChar(255)
  email       String   @unique
  roleId      String
  accessToken String?
  disbled     Boolean?

  phone        String?
  avatarUrl    String?
  dob          String?
  gender       Gender?
  address      String?
  city         String?
  state        String?
  country      String?
  zip          String?
  nationality  String?
  profession   String?
  passwordHash String?
  username     String?
  isVerified   Boolean @default(false)
  about        String?
  wallet       Float?
  timeZone     String?
  tokens       Token[]
  matricNumber String?

  role          Role?          @relation(fields: [roleId], references: [id])
  enrollments   Enrollment[]
  notifications Notification[]
  events        Event[]
  activities    Activity[]
  courses       Course[]
  multimedias   Multimedia[]
  forumPosts    ForumPost[]
  forumComments ForumComment[]
  reminders     Reminder[]
  payments      Payment[]
  invoices      Invoice[]
  sessions      Session[]

  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
  confirmedAt            DateTime?
  confirmationMailSentAt DateTime?

  @@map("users")
}

model Enrollment {
  id                     String           @id @default(cuid())
  userId                 String           @unique
  status                 EnrollmentStatus @default(CREATED)
  platform               String?
  program                String?
  regNumber              String?
  salvationBrief         String?
  godsWorkings           String[]
  reason                 String?
  churchName             String?
  churchAddress          String?
  pastorName             String?
  pastorEmail            String?
  pastorPhone            String?
  churchInvolved         String?
  healthConditions       String[]
  healthIssueDescription String?
  scholarship            Boolean?
  scholarshipReason      String?
  document               MediaFile[]
  qualifications         Qualification[]

  // Define relationships

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  User        User      @relation(fields: [userId], references: [id])
  mediaFileId String?

  @@map("enrollments")
}

model Qualification {
  id             String      @id @default(cuid())
  degree         String
  institution    String
  graduationYear String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  Enrollment     Enrollment? @relation(fields: [enrollmentId], references: [id])
  userId         String?
  enrollmentId   String?

  @@map("qualifications")
}

model Token {
  id           String @id @default(cuid())
  accessToken  String
  refreshToken String

  // Define a many-to-one relation to the User model
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tokens")
}

model Event {
  id       String @id @default(cuid())
  title    String
  date     String
  duration Int
  repeat   Int
  until    String
  detail   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  Course    Course?   @relation(fields: [courseId], references: [id])
  courseId  String?

  @@map("events")
}

model Notification {
  id          String           @id @default(cuid())
  senderId    String
  recipientId String
  courseId    String
  seen        Boolean
  text        String
  title       String
  type        NotificationType
  link        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  User        User?            @relation(fields: [userId], references: [id])
  userId      String?
  Course      Course           @relation(fields: [courseId], references: [id])

  @@map("notifications")
}

model Activity {
  id              String       @id @default(cuid())
  userId          String
  courseId        String?
  courseContentID String?
  activityType    ActivityType
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?

  // Define relationships
  user   User    @relation(fields: [userId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])

  @@map("activities")
}

model Course {
  id               String        @id @default(cuid())
  userId           String
  studentIds       String[]
  code             String
  title            String
  shortDescription String
  description      String?
  semester         String
  year             String
  startDate        String?
  endDate          String?
  dueDate          String?
  language         String?
  thumbnailUrl     String?
  coverUrl         String?
  creditHours      String
  courseType       CourseType?
  tags             String[]
  instructors      String[]
  assistants       String[]
  forums           Forum[]
  quizzes          Quiz[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  status           CourseStatus?
  locked           Boolean       @default(false)
  program          String
  platform         String

  user         User           @relation(fields: [userId], references: [id])
  activities   Activity[]
  anouncements Notification[]
  events       Event[]
  multimedias  Multimedia[]
  assignments  Exercise[]
  payments     Payment[]

  @@map("courses")
}

model Setting {
  id    String      @id @default(cuid())
  type  SettingType
  key   String
  value String
  roles RoleType[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("settings")
}

model MediaFile {
  id       String  @id @default(cuid())
  name     String
  mimetype String
  encoding String?
  size     Int
  url      String

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  Multimedia   Multimedia? @relation(fields: [multimediaId], references: [id])
  multimediaId String?
  Enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  enrollmentId String?
}

model Multimedia {
  id          String      @id @default(cuid())
  courseId    String?
  userId      String
  title       String
  description String?
  category    String
  mediaType   MediaType
  tags        String[]
  playerId    String
  player      Player?     @relation(fields: [playerId], references: [id])
  mediafiles  MediaFile[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  // Define relationships
  course       Course? @relation(fields: [courseId], references: [id])
  User         User?   @relation(fields: [userId], references: [id])
  enrollmentId String?

  @@map("multimedias")
}

model Player {
  id           String       @id @default(cuid())
  currentTime  Int
  duration     Int
  thumbnailUrl String
  posterUrl    String?
  multimedias  Multimedia[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?

  @@map("players")
}

model Forum {
  id          String    @id @default(cuid())
  name        String
  description String?
  courseId    String
  postIds     String[]
  tagIds      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Define relationships
  course Course @relation(fields: [courseId], references: [id])

  @@map("forums")
}

model ForumPost {
  id         String    @id @default(cuid())
  title      String
  content    String
  courseID   String
  author     String
  commentIds String[]
  fileIds    String[]
  forumId    String
  userId     String
  tags       String[]
  upvotes    Int
  downvotes  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Define relationships
  user User @relation(fields: [userId], references: [id])

  @@map("forum_posts")
}

model ForumComment {
  id        String    @id @default(cuid())
  content   String
  courseId  String
  userId    String
  postId    String
  parentId  String
  fileIds   String[]
  upvotes   Int
  downvotes Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Define relationships
  user User @relation(fields: [userId], references: [id])

  @@map("forum_comments")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  postIds   String[]
  courseIds String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tags")
}

model Grade {
  id        String    @id @default(cuid())
  studentId String
  courseId  String
  quizId    String
  value     Int
  criteria  String
  comments  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("grades")
}

model Metric {
  id         String         @id @default(cuid())
  name       String
  metricType MetricType
  value      Float
  timestamp  DateTime
  category   MetricCategory
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?

  @@map("metrics")
}

enum MetricType {
  NUMBER
  TIME
  PERCENTAGE
  COUNT
  DURATION
  RATING
  MONEY
  BOOLEAN
  // Add other metric types as needed
}

enum MetricCategory {
  USER_ACTIVITY
  COURSE_ENROLLMENT
  QUIZ_COMPLETION
  ASSIGNMENT_SUBMISSION
  FORUM_POSTS
  FORUM_COMMENTS
  MEDIA_INTERACTION
  PAYMENT
  INVOICE
  TRANSACTION
  USER_SETTING
  GLOBAL_SETTING
  REMINDER
  // Add other categories as needed
}

model Exercise {
  id        String    @id @default(cuid())
  // Define fields related to Exercise model if necessary
  // ...
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Define relation to Course model
  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  @@map("exercises")
}

model Quiz {
  id                 String           @id @default(cuid())
  name               String
  description        String
  quizType           QuizType
  duration           Int
  passingScore       Int
  proctoringMethod   ProctoringMethod
  questions          Question[]
  resultsReleaseDate DateTime?
  certificate        Boolean
  startTime          DateTime
  endTime            DateTime
  startDate          DateTime
  dueDate            String
  timeLimit          Int
  shuffleQuestions   Boolean
  randomizeQuestions Boolean?
  randomizeAnswers   Boolean
  categories         String[]
  courseId           String
  questionIds        String[]
  gradeIds           String[]
  submissionIds      String[]
  isLocked           Boolean
  waitTime           Int
  weight             Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  Course             Course           @relation(fields: [courseId], references: [id])

  @@map("quizzes")
}

model Question {
  id            String         @id @default(cuid())
  type          QuestionType
  text          String
  choices       AnswerChoice[]
  correctAnswer String
  feedback      String
  hints         String[]
  randomize     Boolean
  pointValue    Int
  categories    String[]
  matchingPairs MatchingPair[]
  Quiz          Quiz?          @relation(fields: [quizId], references: [id])
  quizId        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("questions")
}

model AnswerChoice {
  id         String    @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String
  weight     Int
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  Answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("answer_choices")
}

model Submission {
  id          String    @id @default(cuid())
  quizID      String
  userID      String
  startTime   DateTime
  endTime     DateTime
  answers     Answer[]
  points      Int
  grade       Float
  weight      Int
  feedback    String[]
  startedAt   DateTime
  completedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("submissions")
}

model Answer {
  id            String         @id @default(cuid())
  questionId    String
  choices       AnswerChoice[]
  value         String
  isCorrect     Boolean
  weight        Int
  pointsAwarded Int
  feedback      String
  Submission    Submission?    @relation(fields: [submissionId], references: [id])
  submissionId  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?

  @@map("answers")
}

model MatchingPair {
  id         String    @id @default(cuid())
  question   Question  @relation(fields: [questionId], references: [id])
  left       String
  right      String
  questionId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@map("matching_pairs")
}

model Target {
  id             String          @id @default(cuid())
  name           String
  description    String?
  dueDate        DateTime?
  startDate      DateTime?
  courseId       String
  completionDate DateTime?
  isCompleted    Boolean         @default(false)
  targetType     TargetType
  targetValue    Int?
  currentValue   Int?
  targetMetric   String
  units          String?
  repeatInterval RepeatInterval?
  repeatEndDate  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  // Define relationships

  reminders Reminder[]
  // ...

  @@map("targets")
}

model Reminder {
  id        String    @id @default(cuid())
  targetId  String
  user      User      @relation(fields: [userId], references: [id])
  message   String
  sendTime  DateTime
  sent      Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Define relationships
  target Target @relation(fields: [targetId], references: [id])
  // ...
  userId String

  @@map("reminders")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String
  status        PaymentStatus
  method        PaymentMethod
  type          PaymentType
  transactionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  // Define relationships
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  course      Course?       @relation(fields: [courseId], references: [id])
  courseId    String?
  Transaction Transaction[]

  @@map("payments")
}

model Invoice {
  id        String        @id @default(cuid())
  number    String
  issueDate DateTime
  dueDate   DateTime
  status    InvoiceStatus
  amount    Float
  currency  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?

  // Define relationships
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  Transaction Transaction[]

  @@map("invoices")
}

model Transaction {
  id        String            @id @default(cuid())
  paymentId String
  invoiceId String?
  status    TransactionStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?

  // Define relationships
  payment Payment  @relation(fields: [paymentId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("transactions")
}

enum PaymentStatus {
  CREATED
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  OTHER
}

enum InvoiceStatus {
  CREATED
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionStatus {
  CREATED
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentType {
  COURSE_ENROLLMENT
  COURSE_FEE
  MEMBERSHIP_FEE
  SUBSCRIPTION_FEE
  REGISTRATION_FEE
  SERVICE_FEE
  DONATION
  OTHER
}
