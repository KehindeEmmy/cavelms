type Quiz {
  id: ID!
  name: String!
  description: String!
  quizType: QuizType!
  duration: Int!
  passingScore: Int!
  proctoringMethod: ProctoringMethod!
  questions: [Question!]!
  resultsReleaseDate: Time
  certificate: Boolean!
  startTime: Time!
  endTime: Time!
  startDate: Time!
  dueDate: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  randomizeQuestions: Boolean
  randomizeAnswers: Boolean
  categories: [String!]
  courseId: ID!
  questionIds: [ID!]!
  gradeIds: [ID!]!
  submissionIds: [ID]
  isLocked: Boolean!
  waitTime: Int!
  weight: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
}

enum QuizType {
  EXAM
  ASSIGNMENT
}

enum ProctoringMethod {
  NONE
  MANUAL
  AUTOMATED
}

input CreateQuizInput {
  name: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  categories: [String!]
  questions: [CreateQuestionInput!]!
}

input UpdateQuizInput {
  id: ID!
  name: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  categories: [String!]
  questions: [UpdateQuestionInput!]
}

type Question {
  id: ID!
  type: QuestionType!
  text: String!
  choices: [AnswerChoice!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPair!]!
}

input UpdateQuestionInput {
  id: ID!
  type: QuestionType!
  text: String!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPairInput!]!
}

input CreateQuestionInput {
  type: QuestionType!
  text: String!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPairInput!]!
}

enum QuestionType {
  MULTIPLE_CHOICE
  MULTIPLE_CORRECT
  SHORT_ANSWER
  ESSAY
  MATCHING
  TRUE_FALSE
}

type MatchingPair {
  id: ID!
  question: Question!
  left: String!
  right: String!
}

input MatchingPairInput {
  left: String!
  right: String!
}

type Answer {
  id: ID!
  questionId: ID!
  choices: [AnswerChoice!]!
  value: String!
  isCorrect: Boolean!
  weight: Int!
  pointsAwarded: Int!
  feedback: String!
  createdAt: Time!
  updatedAt: Time!
}

input AnswerInput {
  submission: SubmissionInput!
  questionId: ID!
  choices: [AnswerChoiceInput!]!
  value: String!
  isCorrect: Boolean!
  weight: Int!
  pointsAwarded: Int!
  feedback: String!
}

type AnswerChoice {
  id: ID!
  text: String!
  isCorrect: Boolean!
  feedback: String!
  weight: Int!
}

input AnswerChoiceInput {
  id: ID!
  text: String!
  isCorrect: Boolean!
  feedback: String!
  weight: Int!
}

type Submission {
  id: ID!
  quizID: ID!
  userID: String!
  startTime: Time!
  endTime: Time!
  answers: [Answer!]!
  points: Int!
  grade: Float!
  weight: Int!
  feedback: [String!]
  startedAt: Time!
  completedAt: Time!
  createdAt: Time!
  updatedAt: Time!
}

input SubmissionInput {
  quiz: UpdateQuizInput!
  userID: String!
  startTime: Time!
  endTime: Time!
  answers: [AnswerInput!]!
  points: Int!
  grade: Float!
  weight: Int!
  feedback: [String!]!
  startedAt: Time!
}

extend type Query {
  quiz(id: ID!): Quiz!
  quizzes: [Quiz!]!
  submission(id: ID!): Submission!
  submissions: [Submission!]!
}

extend type Mutation {
  createQuiz(input: CreateQuizInput!): Quiz
  updateQuiz(id: ID!, input: UpdateQuizInput!): Quiz
  deleteQuiz(id: ID!): Boolean!
  submitQuiz(quizId: ID!, input: SubmissionInput!): Submission
}
