type Forum {
  id: ID!
  name: String!
  description: String
  courseId: ID!
  postIds: [ID!]!
  tagIds: [ID!]!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type ForumPost {
  id: ID!
  title: String!
  content: String!
  courseID: ID!
  author: ID!
  commentIds: [ID!]!
  fileIds: [ID!]!
  tags: [ID!]!
  upvotes: Int!
  downvotes: Int!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type ForumComment {
  id: ID!
  content: String!
  courseId: ID!
  userId: ID!
  postId: ID!
  fileIds: [ID!]!
  upvotes: Int!
  downvotes: Int!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type Tag {
  id: ID!
  name: String!
  postIds: [ID!]!
  courseIds: [ID!]!
}

input CreateForumInput {
  name: String!
  description: String
  courseId: ID!
  tags: [ID!]
}

input UpdateForumInput {
  name: String
  description: String
  tags: [ID!]
}

input CreateForumPostInput {
  title: String!
  content: String!
  courseId: ID!
  tags: [ID!]
  files: [ID!]
}

input UpdateForumPostInput {
  title: String
  content: String
  tags: [ID!]
  files: [ID!]
}

input CreateForumCommentInput {
  content: String!
  courseId: ID!
  postId: ID!
  files: [ID!]
}

input UpdateForumCommentInput {
  content: String
  files: [ID!]
}

input CreateTagInput {
  name: String!
}

input UpdateTagInput {
  name: String
}

extend type Query {
  forums(courseId: ID): [Forum!]!
  forum(id: ID!): Forum
  forumPosts(courseId: ID, tags: [ID]): [ForumPost!]!
  forumPost(id: ID!): ForumPost
  forumComments(courseId: ID): [ForumComment!]!
  forumComment(id: ID!): ForumComment
}

# I need your help in implement some query and mutation operations in Golang for some GraphQL models using the repository functions I will provide. you will not need to write the struct definitions because i will be using the gqlgen library to generate them.

# The following is the repository functions you will use in database transaction, do not impliment these funtions, they already exist:
# type MongoDB interface {
# 	Create(m interface{}) error
# 	FetchByID(m interface{}) error
# 	FetchByIDs(m interface{}, ids []string) error
# 	FetchByEmail(m interface{}) error
# 	FetchAll(ml interface{}, m interface{}) error
# 	FetchManyWhere(ml interface{}, m interface{}, key string) error
# 	UpdateOne(m interface{}) error
# 	Delete(m interface{}) error
# 	DeleteMany(m interface{}, ids []string) error
# 	FetchByUserID(ml interface{}, m interface{}) error
# 	UpdateManyWhere(m interface{}, field, value string) error
# }.

# i only need you to implement the query and mutation operations as defined in the graphql model. the following is the funtion prototype of the query and mutation operations:

# func (r *mutationResolver) CreateQuiz(ctx context.Context, input model.CreateQuestionInput) (*model.Quiz, error) {
# 	panic(fmt.Errorf("not implemented: CreateQuiz - createQuiz"))
# }

# // UpdateQuiz is the resolver for the updateQuiz field.
# func (r *mutationResolver) UpdateQuiz(ctx context.Context, id string, input model.UpdateQuizInput) (*model.Quiz, error) {
# 	panic(fmt.Errorf("not implemented: UpdateQuiz - updateQuiz"))
# }

# // DeleteQuiz is the resolver for the deleteQuiz field.
# func (r *mutationResolver) DeleteQuiz(ctx context.Context, id string) (*bool, error) {
# 	panic(fmt.Errorf("not implemented: DeleteQuiz - deleteQuiz"))
# }

# // SubmitQuiz is the resolver for the submitQuiz field.
# func (r *mutationResolver) SubmitQuiz(ctx context.Context, quizID string, answers []model.AnswerInput) (*model.Submission, error) {
# 	panic(fmt.Errorf("not implemented: SubmitQuiz - submitQuiz"))
# }

# // Quiz is the resolver for the quiz field.
# func (r *queryResolver) Quiz(ctx context.Context, id string) (*model.Quiz, error) {
# 	panic(fmt.Errorf("not implemented: Quiz - quiz"))
# }

# // Quizzes is the resolver for the quizzes field.
# func (r *queryResolver) Quizzes(ctx context.Context) ([]model.Quiz, error) {
# 	panic(fmt.Errorf("not implemented: Quizzes - quizzes"))
# }

# // Submission is the resolver for the submission field.
# func (r *queryResolver) Submission(ctx context.Context, id string) (*model.Submission, error) {
# 	panic(fmt.Errorf("not implemented: Submission - submission"))
# }

# // Submissions is the resolver for the submissions field.
# func (r *queryResolver) Submissions(ctx context.Context) ([]model.Submission, error) {
# 	panic(fmt.Errorf("not implemented: Submissions - submissions"))
# }

# Now i will be giving you the GrapQL models and you will write the query and mutation operations based on the prototypes above

#  please is important to ensure all funtion parameter and returned variables follows the exact name of the GraphQL mutation and query as given in the template. do you understand
